/* tslint:disable */
/* eslint-disable */
/**
 * ShpanKids API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiAssignment,
  ApiCreateFamilyTaskCommandArgs,
  ApiDeleteFamilyTaskCommandArgs,
  ApiLoadProblemForAssignmentCommandArgs,
  ApiLoadProblemForAssignmentCommandResult,
  ApiProblemForEdit,
  ApiProblemSet,
  ApiTaskStats,
  ApiUpdateFamilyTaskCommandArgs,
  ApiUpdateTaskStatusCommandArgs,
} from '../models/index';
import {
    ApiAssignmentFromJSON,
    ApiAssignmentToJSON,
    ApiCreateFamilyTaskCommandArgsFromJSON,
    ApiCreateFamilyTaskCommandArgsToJSON,
    ApiDeleteFamilyTaskCommandArgsFromJSON,
    ApiDeleteFamilyTaskCommandArgsToJSON,
    ApiLoadProblemForAssignmentCommandArgsFromJSON,
    ApiLoadProblemForAssignmentCommandArgsToJSON,
    ApiLoadProblemForAssignmentCommandResultFromJSON,
    ApiLoadProblemForAssignmentCommandResultToJSON,
    ApiProblemForEditFromJSON,
    ApiProblemForEditToJSON,
    ApiProblemSetFromJSON,
    ApiProblemSetToJSON,
    ApiTaskStatsFromJSON,
    ApiTaskStatsToJSON,
    ApiUpdateFamilyTaskCommandArgsFromJSON,
    ApiUpdateFamilyTaskCommandArgsToJSON,
    ApiUpdateTaskStatusCommandArgsFromJSON,
    ApiUpdateTaskStatusCommandArgsToJSON,
} from '../models/index';

export interface CreateFamilyTaskRequest {
    apiCreateFamilyTaskCommandArgs?: ApiCreateFamilyTaskCommandArgs;
}

export interface DeleteFamilyTaskRequest {
    apiDeleteFamilyTaskCommandArgs?: ApiDeleteFamilyTaskCommandArgs;
}

export interface GetStatsRequest {
    from?: Date;
    to?: Date;
}

export interface ListProblemSetProblemsRequest {
    problemSetId: string;
    userId: string;
}

export interface ListUserFamilyProblemSetsRequest {
    userId: string;
}

export interface LoadProblemForAssignmentRequest {
    apiLoadProblemForAssignmentCommandArgs?: ApiLoadProblemForAssignmentCommandArgs;
}

export interface UpdateFamilyTaskRequest {
    apiUpdateFamilyTaskCommandArgs?: ApiUpdateFamilyTaskCommandArgs;
}

export interface UpdateTaskStatusRequest {
    apiUpdateTaskStatusCommandArgs?: ApiUpdateTaskStatusCommandArgs;
}

/**
 * 
 */
export class ShpankidsApi extends runtime.BaseAPI {

    /**
     * Create Family Task
     */
    async createFamilyTaskRaw(requestParameters: CreateFamilyTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/commands/create-family-task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiCreateFamilyTaskCommandArgsToJSON(requestParameters['apiCreateFamilyTaskCommandArgs']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Family Task
     */
    async createFamilyTask(requestParameters: CreateFamilyTaskRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createFamilyTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Family Task
     */
    async deleteFamilyTaskRaw(requestParameters: DeleteFamilyTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/commands/delete-family-task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiDeleteFamilyTaskCommandArgsToJSON(requestParameters['apiDeleteFamilyTaskCommandArgs']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Family Task
     */
    async deleteFamilyTask(requestParameters: DeleteFamilyTaskRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFamilyTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Task statistics
     */
    async getStatsRaw(requestParameters: GetStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiTaskStats>>> {
        const queryParameters: any = {};

        if (requestParameters['from'] != null) {
            queryParameters['from'] = (requestParameters['from'] as any).toISOString();
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = (requestParameters['to'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiTaskStatsFromJSON));
    }

    /**
     * Task statistics
     */
    async getStats(requestParameters: GetStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiTaskStats>> {
        const response = await this.getStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list Assignments
     */
    async listAssignmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiAssignment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assignments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiAssignmentFromJSON));
    }

    /**
     * list Assignments
     */
    async listAssignments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiAssignment>> {
        const response = await this.listAssignmentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * list Problem Set Problems for editing
     */
    async listProblemSetProblemsRaw(requestParameters: ListProblemSetProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiProblemForEdit>>> {
        if (requestParameters['problemSetId'] == null) {
            throw new runtime.RequiredError(
                'problemSetId',
                'Required parameter "problemSetId" was null or undefined when calling listProblemSetProblems().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling listProblemSetProblems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/family-problem-sets/{problemSetId}/problems-for-edit`.replace(`{${"problemSetId"}}`, encodeURIComponent(String(requestParameters['problemSetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiProblemForEditFromJSON));
    }

    /**
     * list Problem Set Problems for editing
     */
    async listProblemSetProblems(requestParameters: ListProblemSetProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiProblemForEdit>> {
        const response = await this.listProblemSetProblemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list Problem Sets assign by family
     */
    async listUserFamilyProblemSetsRaw(requestParameters: ListUserFamilyProblemSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiProblemSet>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling listUserFamilyProblemSets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/family-problem-sets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiProblemSetFromJSON));
    }

    /**
     * list Problem Sets assign by family
     */
    async listUserFamilyProblemSets(requestParameters: ListUserFamilyProblemSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiProblemSet>> {
        const response = await this.listUserFamilyProblemSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Loads next problem for assignment
     */
    async loadProblemForAssignmentRaw(requestParameters: LoadProblemForAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiLoadProblemForAssignmentCommandResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/commands/load-problem-for-assignment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiLoadProblemForAssignmentCommandArgsToJSON(requestParameters['apiLoadProblemForAssignmentCommandArgs']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiLoadProblemForAssignmentCommandResultFromJSON(jsonValue));
    }

    /**
     * Loads next problem for assignment
     */
    async loadProblemForAssignment(requestParameters: LoadProblemForAssignmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiLoadProblemForAssignmentCommandResult> {
        const response = await this.loadProblemForAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Family Task
     */
    async updateFamilyTaskRaw(requestParameters: UpdateFamilyTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/commands/update-family-task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiUpdateFamilyTaskCommandArgsToJSON(requestParameters['apiUpdateFamilyTaskCommandArgs']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Family Task
     */
    async updateFamilyTask(requestParameters: UpdateFamilyTaskRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateFamilyTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Update Task Status
     */
    async updateTaskStatusRaw(requestParameters: UpdateTaskStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/commands/update-task-status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiUpdateTaskStatusCommandArgsToJSON(requestParameters['apiUpdateTaskStatusCommandArgs']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Task Status
     */
    async updateTaskStatus(requestParameters: UpdateTaskStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTaskStatusRaw(requestParameters, initOverrides);
    }

}

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ApiFamilyRole.
const (
	Admin  ApiFamilyRole = "admin"
	Member ApiFamilyRole = "member"
)

// Defines values for ApiTaskStatus.
const (
	Blocked    ApiTaskStatus = "blocked"
	Done       ApiTaskStatus = "done"
	Irrelevant ApiTaskStatus = "irrelevant"
	Open       ApiTaskStatus = "open"
)

// ApiFamilyRole defines model for ApiFamilyRole.
type ApiFamilyRole string

// ApiTask Task
type ApiTask struct {
	Description string        `json:"description"`
	DueDate     *time.Time    `json:"dueDate,omitempty"`
	ForDate     time.Time     `json:"forDate"`
	Id          string        `json:"id"`
	Status      ApiTaskStatus `json:"status"`
	Title       string        `json:"title"`
}

// ApiTaskStatus defines model for ApiTaskStatus.
type ApiTaskStatus string

// ApiUpdateTaskStatusCommandArgs defines model for ApiUpdateTaskStatusCommandArgs.
type ApiUpdateTaskStatusCommandArgs struct {
	Comment *string       `json:"comment,omitempty"`
	ForDate time.Time     `json:"forDate"`
	Status  ApiTaskStatus `json:"status"`
	TaskId  string        `json:"taskId"`
}

// UIFamilyInfo Family info
type UIFamilyInfo struct {
	AdminEmail        openapi_types.Email `json:"adminEmail"`
	FamilyDisplayName string              `json:"familyDisplayName"`
	FamilyUri         string              `json:"familyUri"`
	Members           []UIFamilyMember    `json:"members"`
}

// UIFamilyMember Family member
type UIFamilyMember struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Role      ApiFamilyRole       `json:"role"`
}

// UIUserInfo User Info
type UIUserInfo struct {
	Email             openapi_types.Email `json:"email"`
	FamilyDisplayName string              `json:"familyDisplayName"`
	FamilyUri         string              `json:"familyUri"`
	FirstName         *string             `json:"firstName,omitempty"`
	LastName          *string             `json:"lastName,omitempty"`
}

// UpdateTaskStatusJSONRequestBody defines body for UpdateTaskStatus for application/json ContentType.
type UpdateTaskStatusJSONRequestBody = ApiUpdateTaskStatusCommandArgs

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/commands/updateTaskStatus)
	UpdateTaskStatus(w http.ResponseWriter, r *http.Request)

	// (GET /api/tasks)
	ListTasks(w http.ResponseWriter, r *http.Request)

	// (GET /api/ui/familyInfo)
	GetFamilyInfo(w http.ResponseWriter, r *http.Request)

	// (GET /api/ui/userInfo)
	GetUserInfo(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UpdateTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTaskStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTasks(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFamilyInfo operation middleware
func (siw *ServerInterfaceWrapper) GetFamilyInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFamilyInfo(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/commands/updateTaskStatus", wrapper.UpdateTaskStatus).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/tasks", wrapper.ListTasks).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ui/familyInfo", wrapper.GetFamilyInfo).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ui/userInfo", wrapper.GetUserInfo).Methods("GET")

	return r
}

type UpdateTaskStatusRequestObject struct {
	Body *UpdateTaskStatusJSONRequestBody
}

type UpdateTaskStatusResponseObject interface {
	VisitUpdateTaskStatusResponse(w http.ResponseWriter) error
}

type UpdateTaskStatus200Response struct {
}

func (response UpdateTaskStatus200Response) VisitUpdateTaskStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ListTasksRequestObject struct {
}

type ListTasksResponseObject interface {
	VisitListTasksResponse(w http.ResponseWriter) error
}

type ListTasks200JSONResponse []ApiTask

func (response ListTasks200JSONResponse) VisitListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFamilyInfoRequestObject struct {
}

type GetFamilyInfoResponseObject interface {
	VisitGetFamilyInfoResponse(w http.ResponseWriter) error
}

type GetFamilyInfo200JSONResponse UIFamilyInfo

func (response GetFamilyInfo200JSONResponse) VisitGetFamilyInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserInfoRequestObject struct {
}

type GetUserInfoResponseObject interface {
	VisitGetUserInfoResponse(w http.ResponseWriter) error
}

type GetUserInfo200JSONResponse UIUserInfo

func (response GetUserInfo200JSONResponse) VisitGetUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/commands/updateTaskStatus)
	UpdateTaskStatus(ctx context.Context, request UpdateTaskStatusRequestObject) (UpdateTaskStatusResponseObject, error)

	// (GET /api/tasks)
	ListTasks(ctx context.Context, request ListTasksRequestObject) (ListTasksResponseObject, error)

	// (GET /api/ui/familyInfo)
	GetFamilyInfo(ctx context.Context, request GetFamilyInfoRequestObject) (GetFamilyInfoResponseObject, error)

	// (GET /api/ui/userInfo)
	GetUserInfo(ctx context.Context, request GetUserInfoRequestObject) (GetUserInfoResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// UpdateTaskStatus operation middleware
func (sh *strictHandler) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
	var request UpdateTaskStatusRequestObject

	var body UpdateTaskStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTaskStatus(ctx, request.(UpdateTaskStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTaskStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTaskStatusResponseObject); ok {
		if err := validResponse.VisitUpdateTaskStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTasks operation middleware
func (sh *strictHandler) ListTasks(w http.ResponseWriter, r *http.Request) {
	var request ListTasksRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTasks(ctx, request.(ListTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTasksResponseObject); ok {
		if err := validResponse.VisitListTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFamilyInfo operation middleware
func (sh *strictHandler) GetFamilyInfo(w http.ResponseWriter, r *http.Request) {
	var request GetFamilyInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFamilyInfo(ctx, request.(GetFamilyInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFamilyInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFamilyInfoResponseObject); ok {
		if err := validResponse.VisitGetFamilyInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserInfo operation middleware
func (sh *strictHandler) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	var request GetUserInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserInfo(ctx, request.(GetUserInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserInfoResponseObject); ok {
		if err := validResponse.VisitGetUserInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yWTW/bOBCG/4owu0dtlG1vuqVNGxjpF+r6FOTAiGNnYvGjJBXAMPTfC1KSZUl0bKdo",
	"bwY5mpn3mdErb6FQQiuJ0lnIt2CLRxQs/LzS9JEJKjffVYn+AGUlIL8DxgVJSEGgeEAD9ym4jUbIwTpD",
	"cgV16p/9wezaP8XRFoa0IyUhh3CagjZKo3GEdhKynWbjFV4zF3pYKiOYgxw4c/ifI4EQKb9U5rwHiEcL",
	"W8dcFVr81+AScvgn63FlLausFTtvgusUHLmG2ChhnYLBnxUZ5J4jcehi0wGDXeFeSQ9ZPTxh4fYgz3dN",
	"dgNSGn0SrqTP/FCqYo2+FhmDJT4z6Q4NbaE9pj7reyUEk/zKrEKB4dgKJQRKFyV39gRei5rZ9YwfZ93G",
	"9Y3tKsbILmbN5s/kUk13uLlLyF+OVzm8Gx8Eo3IgHcNJbFNDrmuyumSbL0xgnGaIWhiK3jbvYShPDsVR",
	"iJ26z837W+/aYsawzQRdXzzdlxfrve/lJapt3UNcW1sZk8UzoJKx7iDMkr1waVqvO7KEe8Y4xtV11Tex",
	"V7ItEKezsGjiG+dvklls3/DvrtqryR6CFFmhvoMpJp+HWkSty8L8UTN5S9wmV99mkMIzGttgu7z437fl",
	"7ZBpghzeXvijFDRzjwFfxjT5EXuTs1k1cr9gecq6yEBCZOJDk3nn1X4uzAd4Q4KxlUJDAK17p/im8U/p",
	"Wv9kWpdUhIezJ9t8Bpt1O2EZXzLtum7QW62kbVbmzeXlVNDX2zAjx7zR34H1TNfELdz744DJW2hIsMII",
	"kZKsCzymJD6Rdd1NrJOTOZzkbt1fj6mt1en5oivKloNPQVT8DbrEovVrlywHX4chiRt0ex+W36RxisWH",
	"OseVL2ZDydWeEx0UXKrVCnlCMvHhBwXvXO2Pyt1VOVVsf7AFGTxrZCT1ff0rAAD//1sP7OYdCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ApiAssignmentStatus.
const (
	Blocked    ApiAssignmentStatus = "blocked"
	Done       ApiAssignmentStatus = "done"
	Irrelevant ApiAssignmentStatus = "irrelevant"
	Open       ApiAssignmentStatus = "open"
)

// Defines values for ApiAssignmentType.
const (
	ProblemSet ApiAssignmentType = "problemSet"
	Task       ApiAssignmentType = "task"
)

// Defines values for ApiFamilyRole.
const (
	Admin  ApiFamilyRole = "admin"
	Member ApiFamilyRole = "member"
)

// ApiAssignment defines model for ApiAssignment.
type ApiAssignment struct {
	Description *string             `json:"description,omitempty"`
	ForDate     time.Time           `json:"forDate"`
	Id          string              `json:"id"`
	Status      ApiAssignmentStatus `json:"status"`
	Title       string              `json:"title"`
	Type        ApiAssignmentType   `json:"type"`
}

// ApiAssignmentStatus defines model for ApiAssignmentStatus.
type ApiAssignmentStatus string

// ApiAssignmentType defines model for ApiAssignmentType.
type ApiAssignmentType string

// ApiCreateFamilyTaskCommandArgs defines model for ApiCreateFamilyTaskCommandArgs.
type ApiCreateFamilyTaskCommandArgs struct {
	Task ApiFamilyTask `json:"task"`
}

// ApiDeleteFamilyTaskCommandArgs defines model for ApiDeleteFamilyTaskCommandArgs.
type ApiDeleteFamilyTaskCommandArgs struct {
	TaskId string `json:"taskId"`
}

// ApiFamilyRole defines model for ApiFamilyRole.
type ApiFamilyRole string

// ApiFamilyTask defines model for ApiFamilyTask.
type ApiFamilyTask struct {
	Description *string  `json:"description,omitempty"`
	MemberIds   []string `json:"memberIds"`
	Title       string   `json:"title"`
}

// ApiGenerateProblemsCommandArgs defines model for ApiGenerateProblemsCommandArgs.
type ApiGenerateProblemsCommandArgs struct {
	ProblemSetId string `json:"problemSetId"`
	UserId       string `json:"userId"`
}

// ApiGenerateProblemsCommandResp defines model for ApiGenerateProblemsCommandResp.
type ApiGenerateProblemsCommandResp struct {
	Problem ApiProblemForEdit `json:"problem"`
}

// ApiLoadProblemForAssignmentCommandArgs defines model for ApiLoadProblemForAssignmentCommandArgs.
type ApiLoadProblemForAssignmentCommandArgs struct {
	AssignmentId string    `json:"assignmentId"`
	ForDate      time.Time `json:"forDate"`
}

// ApiLoadProblemForAssignmentCommandResult defines model for ApiLoadProblemForAssignmentCommandResult.
type ApiLoadProblemForAssignmentCommandResult struct {
	Problem ApiProblem `json:"problem"`
}

// ApiProblem defines model for ApiProblem.
type ApiProblem struct {
	Answers     []ApiProblemAnswer `json:"answers"`
	Description *string            `json:"description,omitempty"`
	Id          string             `json:"id"`
	Title       string             `json:"title"`
}

// ApiProblemAnswer defines model for ApiProblemAnswer.
type ApiProblemAnswer struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// ApiProblemAnswerForEdit defines model for ApiProblemAnswerForEdit.
type ApiProblemAnswerForEdit struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	IsCorrect   bool    `json:"isCorrect"`
	Title       string  `json:"title"`
}

// ApiProblemForEdit defines model for ApiProblemForEdit.
type ApiProblemForEdit struct {
	Answers     []ApiProblemAnswerForEdit `json:"answers"`
	Description *string                   `json:"description,omitempty"`
	Id          *string                   `json:"id,omitempty"`
	Title       string                    `json:"title"`
}

// ApiProblemSet defines model for ApiProblemSet.
type ApiProblemSet struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// ApiTaskStats defines model for ApiTaskStats.
type ApiTaskStats struct {
	DoneTasksCount  int       `json:"doneTasksCount"`
	ForDate         time.Time `json:"forDate"`
	TotalTasksCount int       `json:"totalTasksCount"`
	UserId          string    `json:"userId"`
}

// ApiUpdateFamilyTaskCommandArgs defines model for ApiUpdateFamilyTaskCommandArgs.
type ApiUpdateFamilyTaskCommandArgs struct {
	Task ApiFamilyTask `json:"task"`
}

// ApiUpdateTaskStatusCommandArgs defines model for ApiUpdateTaskStatusCommandArgs.
type ApiUpdateTaskStatusCommandArgs struct {
	Comment *string             `json:"comment,omitempty"`
	ForDate time.Time           `json:"forDate"`
	Status  ApiAssignmentStatus `json:"status"`
	TaskId  string              `json:"taskId"`
}

// UIFamilyInfo Family info
type UIFamilyInfo struct {
	AdminEmail        openapi_types.Email `json:"adminEmail"`
	FamilyDisplayName string              `json:"familyDisplayName"`
	FamilyUri         string              `json:"familyUri"`
	Members           []UIFamilyMember    `json:"members"`
	Tasks             []UIFamilyTask      `json:"tasks"`
}

// UIFamilyMember Family member
type UIFamilyMember struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Role      ApiFamilyRole       `json:"role"`
}

// UIFamilyTask defines model for UIFamilyTask.
type UIFamilyTask struct {
	Description *string  `json:"description,omitempty"`
	Id          string   `json:"id"`
	MemberIds   []string `json:"memberIds"`
	Title       string   `json:"title"`
}

// UIUserInfo User Info
type UIUserInfo struct {
	Email             openapi_types.Email `json:"email"`
	FamilyDisplayName string              `json:"familyDisplayName"`
	FamilyUri         string              `json:"familyUri"`
	FirstName         *string             `json:"firstName,omitempty"`
	LastName          *string             `json:"lastName,omitempty"`
}

// ListUserFamilyProblemSetsParams defines parameters for ListUserFamilyProblemSets.
type ListUserFamilyProblemSetsParams struct {
	// UserId User ID
	UserId string `form:"userId" json:"userId"`
}

// ListProblemSetProblemsParams defines parameters for ListProblemSetProblems.
type ListProblemSetProblemsParams struct {
	// UserId User ID
	UserId string `form:"userId" json:"userId"`
}

// GetStatsParams defines parameters for GetStats.
type GetStatsParams struct {
	// From From date
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To To date
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// CreateFamilyTaskJSONRequestBody defines body for CreateFamilyTask for application/json ContentType.
type CreateFamilyTaskJSONRequestBody = ApiCreateFamilyTaskCommandArgs

// DeleteFamilyTaskJSONRequestBody defines body for DeleteFamilyTask for application/json ContentType.
type DeleteFamilyTaskJSONRequestBody = ApiDeleteFamilyTaskCommandArgs

// GenerateProblemsJSONRequestBody defines body for GenerateProblems for application/json ContentType.
type GenerateProblemsJSONRequestBody = ApiGenerateProblemsCommandArgs

// LoadProblemForAssignmentJSONRequestBody defines body for LoadProblemForAssignment for application/json ContentType.
type LoadProblemForAssignmentJSONRequestBody = ApiLoadProblemForAssignmentCommandArgs

// UpdateFamilyTaskJSONRequestBody defines body for UpdateFamilyTask for application/json ContentType.
type UpdateFamilyTaskJSONRequestBody = ApiUpdateFamilyTaskCommandArgs

// UpdateTaskStatusJSONRequestBody defines body for UpdateTaskStatus for application/json ContentType.
type UpdateTaskStatusJSONRequestBody = ApiUpdateTaskStatusCommandArgs

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/assignments)
	ListAssignments(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/create-family-task)
	CreateFamilyTask(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/delete-family-task)
	DeleteFamilyTask(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/generate-problems)
	GenerateProblems(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/load-problem-for-assignment)
	LoadProblemForAssignment(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/update-family-task)
	UpdateFamilyTask(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/update-task-status)
	UpdateTaskStatus(w http.ResponseWriter, r *http.Request)

	// (GET /api/family-problem-sets)
	ListUserFamilyProblemSets(w http.ResponseWriter, r *http.Request, params ListUserFamilyProblemSetsParams)

	// (GET /api/family-problem-sets/{problemSetId}/problems-for-edit)
	ListProblemSetProblems(w http.ResponseWriter, r *http.Request, problemSetId string, params ListProblemSetProblemsParams)

	// (GET /api/stats)
	GetStats(w http.ResponseWriter, r *http.Request, params GetStatsParams)

	// (GET /api/ui/familyInfo)
	GetFamilyInfo(w http.ResponseWriter, r *http.Request)

	// (GET /api/ui/userInfo)
	GetUserInfo(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssignments operation middleware
func (siw *ServerInterfaceWrapper) ListAssignments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssignments(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFamilyTask operation middleware
func (siw *ServerInterfaceWrapper) CreateFamilyTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFamilyTask(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFamilyTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteFamilyTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFamilyTask(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenerateProblems operation middleware
func (siw *ServerInterfaceWrapper) GenerateProblems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateProblems(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoadProblemForAssignment operation middleware
func (siw *ServerInterfaceWrapper) LoadProblemForAssignment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoadProblemForAssignment(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFamilyTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateFamilyTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFamilyTask(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTaskStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUserFamilyProblemSets operation middleware
func (siw *ServerInterfaceWrapper) ListUserFamilyProblemSets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserFamilyProblemSetsParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserFamilyProblemSets(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProblemSetProblems operation middleware
func (siw *ServerInterfaceWrapper) ListProblemSetProblems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "problemSetId" -------------
	var problemSetId string

	err = runtime.BindStyledParameterWithOptions("simple", "problemSetId", mux.Vars(r)["problemSetId"], &problemSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "problemSetId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProblemSetProblemsParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProblemSetProblems(w, r, problemSetId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStats operation middleware
func (siw *ServerInterfaceWrapper) GetStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStats(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFamilyInfo operation middleware
func (siw *ServerInterfaceWrapper) GetFamilyInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFamilyInfo(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/assignments", wrapper.ListAssignments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/commands/create-family-task", wrapper.CreateFamilyTask).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/delete-family-task", wrapper.DeleteFamilyTask).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/generate-problems", wrapper.GenerateProblems).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/load-problem-for-assignment", wrapper.LoadProblemForAssignment).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/update-family-task", wrapper.UpdateFamilyTask).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/update-task-status", wrapper.UpdateTaskStatus).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/family-problem-sets", wrapper.ListUserFamilyProblemSets).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/family-problem-sets/{problemSetId}/problems-for-edit", wrapper.ListProblemSetProblems).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/stats", wrapper.GetStats).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ui/familyInfo", wrapper.GetFamilyInfo).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ui/userInfo", wrapper.GetUserInfo).Methods("GET")

	return r
}

type ListAssignmentsRequestObject struct {
}

type ListAssignmentsResponseObject interface {
	VisitListAssignmentsResponse(w http.ResponseWriter) error
}

type ListAssignments200JSONResponse []ApiAssignment

func (response ListAssignments200JSONResponse) VisitListAssignmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFamilyTaskRequestObject struct {
	Body *CreateFamilyTaskJSONRequestBody
}

type CreateFamilyTaskResponseObject interface {
	VisitCreateFamilyTaskResponse(w http.ResponseWriter) error
}

type CreateFamilyTask200Response struct {
}

func (response CreateFamilyTask200Response) VisitCreateFamilyTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFamilyTaskRequestObject struct {
	Body *DeleteFamilyTaskJSONRequestBody
}

type DeleteFamilyTaskResponseObject interface {
	VisitDeleteFamilyTaskResponse(w http.ResponseWriter) error
}

type DeleteFamilyTask200Response struct {
}

func (response DeleteFamilyTask200Response) VisitDeleteFamilyTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GenerateProblemsRequestObject struct {
	Body *GenerateProblemsJSONRequestBody
}

type GenerateProblemsResponseObject interface {
	VisitGenerateProblemsResponse(w http.ResponseWriter) error
}

type GenerateProblems200JSONResponse ApiGenerateProblemsCommandResp

func (response GenerateProblems200JSONResponse) VisitGenerateProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoadProblemForAssignmentRequestObject struct {
	Body *LoadProblemForAssignmentJSONRequestBody
}

type LoadProblemForAssignmentResponseObject interface {
	VisitLoadProblemForAssignmentResponse(w http.ResponseWriter) error
}

type LoadProblemForAssignment200JSONResponse ApiLoadProblemForAssignmentCommandResult

func (response LoadProblemForAssignment200JSONResponse) VisitLoadProblemForAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFamilyTaskRequestObject struct {
	Body *UpdateFamilyTaskJSONRequestBody
}

type UpdateFamilyTaskResponseObject interface {
	VisitUpdateFamilyTaskResponse(w http.ResponseWriter) error
}

type UpdateFamilyTask200Response struct {
}

func (response UpdateFamilyTask200Response) VisitUpdateFamilyTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateTaskStatusRequestObject struct {
	Body *UpdateTaskStatusJSONRequestBody
}

type UpdateTaskStatusResponseObject interface {
	VisitUpdateTaskStatusResponse(w http.ResponseWriter) error
}

type UpdateTaskStatus200Response struct {
}

func (response UpdateTaskStatus200Response) VisitUpdateTaskStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ListUserFamilyProblemSetsRequestObject struct {
	Params ListUserFamilyProblemSetsParams
}

type ListUserFamilyProblemSetsResponseObject interface {
	VisitListUserFamilyProblemSetsResponse(w http.ResponseWriter) error
}

type ListUserFamilyProblemSets200JSONResponse []ApiProblemSet

func (response ListUserFamilyProblemSets200JSONResponse) VisitListUserFamilyProblemSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListProblemSetProblemsRequestObject struct {
	ProblemSetId string `json:"problemSetId"`
	Params       ListProblemSetProblemsParams
}

type ListProblemSetProblemsResponseObject interface {
	VisitListProblemSetProblemsResponse(w http.ResponseWriter) error
}

type ListProblemSetProblems200JSONResponse []ApiProblemForEdit

func (response ListProblemSetProblems200JSONResponse) VisitListProblemSetProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatsRequestObject struct {
	Params GetStatsParams
}

type GetStatsResponseObject interface {
	VisitGetStatsResponse(w http.ResponseWriter) error
}

type GetStats200JSONResponse []ApiTaskStats

func (response GetStats200JSONResponse) VisitGetStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFamilyInfoRequestObject struct {
}

type GetFamilyInfoResponseObject interface {
	VisitGetFamilyInfoResponse(w http.ResponseWriter) error
}

type GetFamilyInfo200JSONResponse UIFamilyInfo

func (response GetFamilyInfo200JSONResponse) VisitGetFamilyInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserInfoRequestObject struct {
}

type GetUserInfoResponseObject interface {
	VisitGetUserInfoResponse(w http.ResponseWriter) error
}

type GetUserInfo200JSONResponse UIUserInfo

func (response GetUserInfo200JSONResponse) VisitGetUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/assignments)
	ListAssignments(ctx context.Context, request ListAssignmentsRequestObject) (ListAssignmentsResponseObject, error)

	// (POST /api/commands/create-family-task)
	CreateFamilyTask(ctx context.Context, request CreateFamilyTaskRequestObject) (CreateFamilyTaskResponseObject, error)

	// (POST /api/commands/delete-family-task)
	DeleteFamilyTask(ctx context.Context, request DeleteFamilyTaskRequestObject) (DeleteFamilyTaskResponseObject, error)

	// (POST /api/commands/generate-problems)
	GenerateProblems(ctx context.Context, request GenerateProblemsRequestObject) (GenerateProblemsResponseObject, error)

	// (POST /api/commands/load-problem-for-assignment)
	LoadProblemForAssignment(ctx context.Context, request LoadProblemForAssignmentRequestObject) (LoadProblemForAssignmentResponseObject, error)

	// (POST /api/commands/update-family-task)
	UpdateFamilyTask(ctx context.Context, request UpdateFamilyTaskRequestObject) (UpdateFamilyTaskResponseObject, error)

	// (POST /api/commands/update-task-status)
	UpdateTaskStatus(ctx context.Context, request UpdateTaskStatusRequestObject) (UpdateTaskStatusResponseObject, error)

	// (GET /api/family-problem-sets)
	ListUserFamilyProblemSets(ctx context.Context, request ListUserFamilyProblemSetsRequestObject) (ListUserFamilyProblemSetsResponseObject, error)

	// (GET /api/family-problem-sets/{problemSetId}/problems-for-edit)
	ListProblemSetProblems(ctx context.Context, request ListProblemSetProblemsRequestObject) (ListProblemSetProblemsResponseObject, error)

	// (GET /api/stats)
	GetStats(ctx context.Context, request GetStatsRequestObject) (GetStatsResponseObject, error)

	// (GET /api/ui/familyInfo)
	GetFamilyInfo(ctx context.Context, request GetFamilyInfoRequestObject) (GetFamilyInfoResponseObject, error)

	// (GET /api/ui/userInfo)
	GetUserInfo(ctx context.Context, request GetUserInfoRequestObject) (GetUserInfoResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAssignments operation middleware
func (sh *strictHandler) ListAssignments(w http.ResponseWriter, r *http.Request) {
	var request ListAssignmentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAssignments(ctx, request.(ListAssignmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAssignments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAssignmentsResponseObject); ok {
		if err := validResponse.VisitListAssignmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFamilyTask operation middleware
func (sh *strictHandler) CreateFamilyTask(w http.ResponseWriter, r *http.Request) {
	var request CreateFamilyTaskRequestObject

	var body CreateFamilyTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFamilyTask(ctx, request.(CreateFamilyTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFamilyTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFamilyTaskResponseObject); ok {
		if err := validResponse.VisitCreateFamilyTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFamilyTask operation middleware
func (sh *strictHandler) DeleteFamilyTask(w http.ResponseWriter, r *http.Request) {
	var request DeleteFamilyTaskRequestObject

	var body DeleteFamilyTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFamilyTask(ctx, request.(DeleteFamilyTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFamilyTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFamilyTaskResponseObject); ok {
		if err := validResponse.VisitDeleteFamilyTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateProblems operation middleware
func (sh *strictHandler) GenerateProblems(w http.ResponseWriter, r *http.Request) {
	var request GenerateProblemsRequestObject

	var body GenerateProblemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateProblems(ctx, request.(GenerateProblemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateProblems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GenerateProblemsResponseObject); ok {
		if err := validResponse.VisitGenerateProblemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoadProblemForAssignment operation middleware
func (sh *strictHandler) LoadProblemForAssignment(w http.ResponseWriter, r *http.Request) {
	var request LoadProblemForAssignmentRequestObject

	var body LoadProblemForAssignmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoadProblemForAssignment(ctx, request.(LoadProblemForAssignmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoadProblemForAssignment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoadProblemForAssignmentResponseObject); ok {
		if err := validResponse.VisitLoadProblemForAssignmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFamilyTask operation middleware
func (sh *strictHandler) UpdateFamilyTask(w http.ResponseWriter, r *http.Request) {
	var request UpdateFamilyTaskRequestObject

	var body UpdateFamilyTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFamilyTask(ctx, request.(UpdateFamilyTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFamilyTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFamilyTaskResponseObject); ok {
		if err := validResponse.VisitUpdateFamilyTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTaskStatus operation middleware
func (sh *strictHandler) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
	var request UpdateTaskStatusRequestObject

	var body UpdateTaskStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTaskStatus(ctx, request.(UpdateTaskStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTaskStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTaskStatusResponseObject); ok {
		if err := validResponse.VisitUpdateTaskStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserFamilyProblemSets operation middleware
func (sh *strictHandler) ListUserFamilyProblemSets(w http.ResponseWriter, r *http.Request, params ListUserFamilyProblemSetsParams) {
	var request ListUserFamilyProblemSetsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserFamilyProblemSets(ctx, request.(ListUserFamilyProblemSetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserFamilyProblemSets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserFamilyProblemSetsResponseObject); ok {
		if err := validResponse.VisitListUserFamilyProblemSetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProblemSetProblems operation middleware
func (sh *strictHandler) ListProblemSetProblems(w http.ResponseWriter, r *http.Request, problemSetId string, params ListProblemSetProblemsParams) {
	var request ListProblemSetProblemsRequestObject

	request.ProblemSetId = problemSetId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProblemSetProblems(ctx, request.(ListProblemSetProblemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProblemSetProblems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProblemSetProblemsResponseObject); ok {
		if err := validResponse.VisitListProblemSetProblemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStats operation middleware
func (sh *strictHandler) GetStats(w http.ResponseWriter, r *http.Request, params GetStatsParams) {
	var request GetStatsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStats(ctx, request.(GetStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStats")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStatsResponseObject); ok {
		if err := validResponse.VisitGetStatsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFamilyInfo operation middleware
func (sh *strictHandler) GetFamilyInfo(w http.ResponseWriter, r *http.Request) {
	var request GetFamilyInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFamilyInfo(ctx, request.(GetFamilyInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFamilyInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFamilyInfoResponseObject); ok {
		if err := validResponse.VisitGetFamilyInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserInfo operation middleware
func (sh *strictHandler) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	var request GetUserInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserInfo(ctx, request.(GetUserInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserInfoResponseObject); ok {
		if err := validResponse.VisitGetUserInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZS2/jNhD+KwLbo7xO25tvbrJZGJu2QRKfghxoa+xwI5FaktrWCPzfCz5k6kHKkmMF",
	"wd4SUZrHNw/OfH5Fa5bljAKVAs1ekVg/Q4b1n/OczIUgW5oBlepBzlkOXBLQxwmINSe5JIyqf+UuBzRD",
	"QnJCt2gfow3jV1iCOtswnmGJZijBEiaSZIDi9gck8coREstCa/yVwwbN0C9TZ/LU2jutGXtvPtnHSBKZ",
	"gleseTBA6IP6YL+PEYfvBeGQoNmjstmKKnU5xw+mPx2cZatvsJZKvc/e2SsCWmRKLsuBohgljCo5q5St",
	"X0CpIpxDCj8wlRWpzqm2wRWZEosXFKsorlLI7iEo4pIDlnCNM5LuHrB4uWRZhmky51vRTgMt9TiOTloL",
	"Qy0hgNEVpDDIlIUviTwKF0lIpVF2x9IaeDjJiIpIBtkKeAi5ipeD68VIXiT6ZSIhEx15izDneNeV4d5E",
	"tRnqVAUw+AIUOJZwa3JFdMLuEmrhr+BCKGXHbawJOnw2zMQ7EHnQxB55asVdM/45ITJkYsioG4YTJ8GV",
	"Yid++PBaAL+BnbRhck28E3aaB3cgilSeAeChyN46BQ30qPgXeL1o+pkw11/6aupYqQZuqlNKsTS/221r",
	"6uCecjZD+5hX1sy5rCTiknGulLnTFWMpYDrAiRJoJ63bl6AXb020Q0t573wblmpqLvhweaZuVDUkebqn",
	"GpHUsbhkBa2mCqEStqa+B4+ikkmcHpPa91pz86D9Im4a3VYYwGGZJx9lMjOmlIEpukeENcvKJeLte8Lb",
	"FoJhM2LPaX65MCgu6Ia16gWZs4iow7jZVdRc+TnDJK0BAPqJx/mNlnVFRJ7i3d848y835q0lJx2TZv9O",
	"Vnr3l5l9fUOoytzB8kzONaU1q+fgSlwFy4eE86y0qCtW1ptQtOyg34wXDAgV4UIGQ5TijkNut49epatX",
	"lSZspVXOiIpKq6ALndN2mMA98GFWm+ViqVqwt0rVSbTw1Si8b3menDehFPAUirOgDZOSQyxENgTo/jnH",
	"9CtJRDS/XaAY/QAuDGwXn35TZrEcKM4JmqE/PqlHMcqxfNbwTXFOpm4L0c+2ZsqoRyAlQkbzyotaLMfq",
	"WPVsdEOErJ9zEDmjwsTp94sLc9lQaS8bnOcpWWsB02/CJK2pnyFjXIUFa3er5viG/vmqIyGxuggfkVDI",
	"vRCVkOqxBmNt7koxXWumZWKiMSkv7JwJDzqGlYlse3owZE4dnyZxg0xCgJB/smQ3CJsjkHRRRPu9ycR2",
	"ZE4HKtE8UD+gDGfUCVSTVhoPqC4CawygtpYWmdh9WoRxKhmUqHw12jBe/hMJkC3YmpzLeLB1EVBh2EbW",
	"rrmlN1Z8ynBSxmayYXyC6xS7N1I3DCciovCfPIRHharyaatTBmic8SLWh/oaP3L96Ks3xrDQq0+/ZmTW",
	"pM5m1FzqxotR1/o4RjOyQCmEJm5r6wRKmRXZdc0PlFs5xwbKv9yeESibQWU7EHBsOLKpHd2DFLb8o9Uu",
	"MnK845Kaak3AHb8j9HTGcQZSr4GP/lH4Cqk5EM3Q9wK4kk712OlYDDdsSl5AXIG3OZg+vdOkVuGwzjOp",
	"eSI0fa3+TrGflren7uZgqcNeISz/Nhev+lSh5Yui86ty9XaGsKrGRVLN5C6Qjd9b+ocz/tkSJsjNnpQ0",
	"omQqvVmgO5x6hQhJ1sIzZElDdR6J8DVnWZQYasqH+oazDFUx7vfbUctc1qVEsuEq3iu2jjQ+T1iLsh2U",
	"/IE3vF9ARgKE2o5tXy6Jv1aYK5zhiFNRjZs87vlyUXe5qBAmQYdTtt1CEhEaqdeDDh/Il1HdPWjp66x7",
	"8FrmdZ3v2D/t/w8AAP//r3BXcSgjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

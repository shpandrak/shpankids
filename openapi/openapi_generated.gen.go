// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ApiAssignmentStatus.
const (
	Blocked    ApiAssignmentStatus = "blocked"
	Done       ApiAssignmentStatus = "done"
	Irrelevant ApiAssignmentStatus = "irrelevant"
	Open       ApiAssignmentStatus = "open"
)

// Defines values for ApiAssignmentType.
const (
	ProblemSet ApiAssignmentType = "problemSet"
	Task       ApiAssignmentType = "task"
)

// Defines values for ApiFamilyRole.
const (
	Admin  ApiFamilyRole = "admin"
	Member ApiFamilyRole = "member"
)

// Defines values for UIUserRole.
const (
	FamilyAdmin  UIUserRole = "familyAdmin"
	FamilyMember UIUserRole = "familyMember"
	Guest        UIUserRole = "guest"
)

// ApiAssignment defines model for ApiAssignment.
type ApiAssignment struct {
	Description *string             `json:"description,omitempty"`
	ForDate     time.Time           `json:"forDate"`
	Id          string              `json:"id"`
	Status      ApiAssignmentStatus `json:"status"`
	Title       string              `json:"title"`
	Type        ApiAssignmentType   `json:"type"`
}

// ApiAssignmentStatus defines model for ApiAssignmentStatus.
type ApiAssignmentStatus string

// ApiAssignmentType defines model for ApiAssignmentType.
type ApiAssignmentType string

// ApiCreateFamilyTaskCommandArgs defines model for ApiCreateFamilyTaskCommandArgs.
type ApiCreateFamilyTaskCommandArgs struct {
	Task ApiFamilyTask `json:"task"`
}

// ApiCreateProblemSetCommandArgs defines model for ApiCreateProblemSetCommandArgs.
type ApiCreateProblemSetCommandArgs struct {
	Description *string `json:"description,omitempty"`
	ForUserId   string  `json:"forUserId"`
	Title       string  `json:"title"`
}

// ApiCreateProblemsInSetCommandArgs defines model for ApiCreateProblemsInSetCommandArgs.
type ApiCreateProblemsInSetCommandArgs struct {
	ForUserId    string              `json:"forUserId"`
	ProblemSetId string              `json:"problemSetId"`
	Problems     []ApiProblemForEdit `json:"problems"`
}

// ApiDeleteFamilyTaskCommandArgs defines model for ApiDeleteFamilyTaskCommandArgs.
type ApiDeleteFamilyTaskCommandArgs struct {
	TaskId string `json:"taskId"`
}

// ApiFamilyRole defines model for ApiFamilyRole.
type ApiFamilyRole string

// ApiFamilyTask defines model for ApiFamilyTask.
type ApiFamilyTask struct {
	Description *string  `json:"description,omitempty"`
	MemberIds   []string `json:"memberIds"`
	Title       string   `json:"title"`
}

// ApiGenerateProblemsCommandArgs defines model for ApiGenerateProblemsCommandArgs.
type ApiGenerateProblemsCommandArgs struct {
	AdditionalRequestText *string `json:"additionalRequestText,omitempty"`
	ProblemSetId          string  `json:"problemSetId"`
	UserId                string  `json:"userId"`
}

// ApiLoadProblemForAssignmentCommandArgs defines model for ApiLoadProblemForAssignmentCommandArgs.
type ApiLoadProblemForAssignmentCommandArgs struct {
	AssignmentId string    `json:"assignmentId"`
	ForDate      time.Time `json:"forDate"`
}

// ApiLoadProblemForAssignmentCommandResult defines model for ApiLoadProblemForAssignmentCommandResult.
type ApiLoadProblemForAssignmentCommandResult struct {
	Problem ApiProblem `json:"problem"`
}

// ApiProblem defines model for ApiProblem.
type ApiProblem struct {
	Answers     []ApiProblemAnswer `json:"answers"`
	Description *string            `json:"description,omitempty"`
	Id          string             `json:"id"`
	Title       string             `json:"title"`
}

// ApiProblemAnswer defines model for ApiProblemAnswer.
type ApiProblemAnswer struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// ApiProblemAnswerForEdit defines model for ApiProblemAnswerForEdit.
type ApiProblemAnswerForEdit struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	IsCorrect   bool    `json:"isCorrect"`
	Title       string  `json:"title"`
}

// ApiProblemForEdit defines model for ApiProblemForEdit.
type ApiProblemForEdit struct {
	Answers     []ApiProblemAnswerForEdit `json:"answers"`
	Description *string                   `json:"description,omitempty"`
	Id          *string                   `json:"id,omitempty"`
	Title       string                    `json:"title"`
}

// ApiProblemSet defines model for ApiProblemSet.
type ApiProblemSet struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// ApiRefineProblemsCommandArgs defines model for ApiRefineProblemsCommandArgs.
type ApiRefineProblemsCommandArgs struct {
	ProblemSetId string              `json:"problemSetId"`
	Problems     []ApiProblemForEdit `json:"problems"`
	RefineText   string              `json:"refineText"`
	UserId       string              `json:"userId"`
}

// ApiSubmitProblemAnswerCommandArgs defines model for ApiSubmitProblemAnswerCommandArgs.
type ApiSubmitProblemAnswerCommandArgs struct {
	AnswerId     string `json:"answerId"`
	AssignmentId string `json:"assignmentId"`
	ProblemId    string `json:"problemId"`
}

// ApiSubmitProblemAnswerCommandResp defines model for ApiSubmitProblemAnswerCommandResp.
type ApiSubmitProblemAnswerCommandResp struct {
	CorrectAnswerId string  `json:"correctAnswerId"`
	Explanation     *string `json:"explanation,omitempty"`
	IsCorrect       bool    `json:"isCorrect"`
}

// ApiTaskStats defines model for ApiTaskStats.
type ApiTaskStats struct {
	DoneTasksCount  int       `json:"doneTasksCount"`
	ForDate         time.Time `json:"forDate"`
	TotalTasksCount int       `json:"totalTasksCount"`
	UserId          string    `json:"userId"`
}

// ApiUpdateFamilyTaskCommandArgs defines model for ApiUpdateFamilyTaskCommandArgs.
type ApiUpdateFamilyTaskCommandArgs struct {
	Task ApiFamilyTask `json:"task"`
}

// ApiUpdateTaskStatusCommandArgs defines model for ApiUpdateTaskStatusCommandArgs.
type ApiUpdateTaskStatusCommandArgs struct {
	Comment *string             `json:"comment,omitempty"`
	ForDate time.Time           `json:"forDate"`
	Status  ApiAssignmentStatus `json:"status"`
	TaskId  string              `json:"taskId"`
}

// ApiUserProblemSolution defines model for ApiUserProblemSolution.
type ApiUserProblemSolution struct {
	Correct              bool      `json:"correct"`
	CorrectAnswerId      string    `json:"correctAnswerId"`
	ProblemId            string    `json:"problemId"`
	ProblemTitle         string    `json:"problemTitle"`
	SolvedDate           time.Time `json:"solvedDate"`
	UserProvidedAnswerId string    `json:"userProvidedAnswerId"`
}

// UIFamilyInfo Family info
type UIFamilyInfo struct {
	AdminEmail        openapi_types.Email `json:"adminEmail"`
	FamilyDisplayName string              `json:"familyDisplayName"`
	FamilyUri         string              `json:"familyUri"`
	Members           []UIFamilyMember    `json:"members"`
	Tasks             []UIFamilyTask      `json:"tasks"`
}

// UIFamilyMember Family member
type UIFamilyMember struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Role      ApiFamilyRole       `json:"role"`
}

// UIFamilyTask defines model for UIFamilyTask.
type UIFamilyTask struct {
	Description *string  `json:"description,omitempty"`
	Id          string   `json:"id"`
	MemberIds   []string `json:"memberIds"`
	Title       string   `json:"title"`
}

// UIUserInfo User Info
type UIUserInfo struct {
	Email     openapi_types.Email `json:"email"`
	FirstName *string             `json:"firstName,omitempty"`
	LastName  *string             `json:"lastName,omitempty"`
	Role      UIUserRole          `json:"role"`
}

// UIUserRole defines model for UIUserRole.
type UIUserRole string

// ListUserFamilyProblemSetsParams defines parameters for ListUserFamilyProblemSets.
type ListUserFamilyProblemSetsParams struct {
	// UserId User ID
	UserId string `form:"userId" json:"userId"`
}

// GetStatsParams defines parameters for GetStats.
type GetStatsParams struct {
	// From From date
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To To date
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// CreateFamilyTaskJSONRequestBody defines body for CreateFamilyTask for application/json ContentType.
type CreateFamilyTaskJSONRequestBody = ApiCreateFamilyTaskCommandArgs

// CreateProblemsInSetJSONRequestBody defines body for CreateProblemsInSet for application/json ContentType.
type CreateProblemsInSetJSONRequestBody = ApiCreateProblemsInSetCommandArgs

// CreateProblemSetJSONRequestBody defines body for CreateProblemSet for application/json ContentType.
type CreateProblemSetJSONRequestBody = ApiCreateProblemSetCommandArgs

// DeleteFamilyTaskJSONRequestBody defines body for DeleteFamilyTask for application/json ContentType.
type DeleteFamilyTaskJSONRequestBody = ApiDeleteFamilyTaskCommandArgs

// GenerateProblemsJSONRequestBody defines body for GenerateProblems for application/json ContentType.
type GenerateProblemsJSONRequestBody = ApiGenerateProblemsCommandArgs

// LoadProblemForAssignmentJSONRequestBody defines body for LoadProblemForAssignment for application/json ContentType.
type LoadProblemForAssignmentJSONRequestBody = ApiLoadProblemForAssignmentCommandArgs

// RefineProblemsJSONRequestBody defines body for RefineProblems for application/json ContentType.
type RefineProblemsJSONRequestBody = ApiRefineProblemsCommandArgs

// SubmitProblemAnswerJSONRequestBody defines body for SubmitProblemAnswer for application/json ContentType.
type SubmitProblemAnswerJSONRequestBody = ApiSubmitProblemAnswerCommandArgs

// UpdateFamilyTaskJSONRequestBody defines body for UpdateFamilyTask for application/json ContentType.
type UpdateFamilyTaskJSONRequestBody = ApiUpdateFamilyTaskCommandArgs

// UpdateTaskStatusJSONRequestBody defines body for UpdateAssignmentStatus for application/json ContentType.
type UpdateTaskStatusJSONRequestBody = ApiUpdateTaskStatusCommandArgs

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/assignments)
	ListAssignments(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/create-family-task)
	CreateFamilyTask(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/create-problems-in-set)
	CreateProblemsInSet(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/create-problemset)
	CreateProblemSet(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/delete-family-task)
	DeleteFamilyTask(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/generate-problems)
	GenerateProblems(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/load-problem-for-assignment)
	LoadProblemForAssignment(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/refine-problems)
	RefineProblems(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/submit-problem-answer)
	SubmitProblemAnswer(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/update-family-task)
	UpdateFamilyTask(w http.ResponseWriter, r *http.Request)

	// (POST /api/commands/update-task-status)
	UpdateTaskStatus(w http.ResponseWriter, r *http.Request)

	// (GET /api/family-members/{userId}/problem-sets/{problemSetId}/problems-for-edit)
	ListProblemSetProblems(w http.ResponseWriter, r *http.Request, userId string, problemSetId string)

	// (GET /api/family-members/{userId}/problem-sets/{problemSetId}/problems/{problemId})
	GetProblem(w http.ResponseWriter, r *http.Request, userId string, problemSetId string, problemId string)

	// (GET /api/family-problem-sets)
	ListUserFamilyProblemSets(w http.ResponseWriter, r *http.Request, params ListUserFamilyProblemSetsParams)

	// (GET /api/family-problem-sets/{problemSetId}/{userId}/solutions)
	ListUserProblemsSolutions(w http.ResponseWriter, r *http.Request, problemSetId string, userId string)

	// (GET /api/stats)
	GetStats(w http.ResponseWriter, r *http.Request, params GetStatsParams)

	// (GET /api/ui/familyInfo)
	GetFamilyInfo(w http.ResponseWriter, r *http.Request)

	// (GET /api/ui/userInfo)
	GetUserInfo(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssignments operation middleware
func (siw *ServerInterfaceWrapper) ListAssignments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssignments(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFamilyTask operation middleware
func (siw *ServerInterfaceWrapper) CreateFamilyTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFamilyTask(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProblemsInSet operation middleware
func (siw *ServerInterfaceWrapper) CreateProblemsInSet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProblemsInSet(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProblemSet operation middleware
func (siw *ServerInterfaceWrapper) CreateProblemSet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProblemSet(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFamilyTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteFamilyTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFamilyTask(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GenerateProblems operation middleware
func (siw *ServerInterfaceWrapper) GenerateProblems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateProblems(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoadProblemForAssignment operation middleware
func (siw *ServerInterfaceWrapper) LoadProblemForAssignment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoadProblemForAssignment(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RefineProblems operation middleware
func (siw *ServerInterfaceWrapper) RefineProblems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefineProblems(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitProblemAnswer operation middleware
func (siw *ServerInterfaceWrapper) SubmitProblemAnswer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitProblemAnswer(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateFamilyTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateFamilyTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFamilyTask(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTaskStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListProblemSetProblems operation middleware
func (siw *ServerInterfaceWrapper) ListProblemSetProblems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", mux.Vars(r)["userId"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "problemSetId" -------------
	var problemSetId string

	err = runtime.BindStyledParameterWithOptions("simple", "problemSetId", mux.Vars(r)["problemSetId"], &problemSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "problemSetId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProblemSetProblems(w, r, userId, problemSetId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProblem operation middleware
func (siw *ServerInterfaceWrapper) GetProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", mux.Vars(r)["userId"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "problemSetId" -------------
	var problemSetId string

	err = runtime.BindStyledParameterWithOptions("simple", "problemSetId", mux.Vars(r)["problemSetId"], &problemSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "problemSetId", Err: err})
		return
	}

	// ------------- Path parameter "problemId" -------------
	var problemId string

	err = runtime.BindStyledParameterWithOptions("simple", "problemId", mux.Vars(r)["problemId"], &problemId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "problemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblem(w, r, userId, problemSetId, problemId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUserFamilyProblemSets operation middleware
func (siw *ServerInterfaceWrapper) ListUserFamilyProblemSets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserFamilyProblemSetsParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserFamilyProblemSets(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUserProblemsSolutions operation middleware
func (siw *ServerInterfaceWrapper) ListUserProblemsSolutions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "problemSetId" -------------
	var problemSetId string

	err = runtime.BindStyledParameterWithOptions("simple", "problemSetId", mux.Vars(r)["problemSetId"], &problemSetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "problemSetId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", mux.Vars(r)["userId"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserProblemsSolutions(w, r, problemSetId, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStats operation middleware
func (siw *ServerInterfaceWrapper) GetStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStats(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFamilyInfo operation middleware
func (siw *ServerInterfaceWrapper) GetFamilyInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFamilyInfo(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserInfo(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/assignments", wrapper.ListAssignments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/commands/create-family-task", wrapper.CreateFamilyTask).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/create-problems-in-set", wrapper.CreateProblemsInSet).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/create-problemset", wrapper.CreateProblemSet).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/delete-family-task", wrapper.DeleteFamilyTask).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/generate-problems", wrapper.GenerateProblems).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/load-problem-for-assignment", wrapper.LoadProblemForAssignment).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/refine-problems", wrapper.RefineProblems).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/submit-problem-answer", wrapper.SubmitProblemAnswer).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/update-family-task", wrapper.UpdateFamilyTask).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/commands/update-task-status", wrapper.UpdateTaskStatus).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/family-members/{userId}/problem-sets/{problemSetId}/problems-for-edit", wrapper.ListProblemSetProblems).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/family-members/{userId}/problem-sets/{problemSetId}/problems/{problemId}", wrapper.GetProblem).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/family-problem-sets", wrapper.ListUserFamilyProblemSets).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/family-problem-sets/{problemSetId}/{userId}/solutions", wrapper.ListUserProblemsSolutions).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/stats", wrapper.GetStats).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ui/familyInfo", wrapper.GetFamilyInfo).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/ui/userInfo", wrapper.GetUserInfo).Methods("GET")

	return r
}

type ListAssignmentsRequestObject struct {
}

type ListAssignmentsResponseObject interface {
	VisitListAssignmentsResponse(w http.ResponseWriter) error
}

type ListAssignments200JSONResponse []ApiAssignment

func (response ListAssignments200JSONResponse) VisitListAssignmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFamilyTaskRequestObject struct {
	Body *CreateFamilyTaskJSONRequestBody
}

type CreateFamilyTaskResponseObject interface {
	VisitCreateFamilyTaskResponse(w http.ResponseWriter) error
}

type CreateFamilyTask200Response struct {
}

func (response CreateFamilyTask200Response) VisitCreateFamilyTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateProblemsInSetRequestObject struct {
	Body *CreateProblemsInSetJSONRequestBody
}

type CreateProblemsInSetResponseObject interface {
	VisitCreateProblemsInSetResponse(w http.ResponseWriter) error
}

type CreateProblemsInSet200Response struct {
}

func (response CreateProblemsInSet200Response) VisitCreateProblemsInSetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateProblemSetRequestObject struct {
	Body *CreateProblemSetJSONRequestBody
}

type CreateProblemSetResponseObject interface {
	VisitCreateProblemSetResponse(w http.ResponseWriter) error
}

type CreateProblemSet200Response struct {
}

func (response CreateProblemSet200Response) VisitCreateProblemSetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFamilyTaskRequestObject struct {
	Body *DeleteFamilyTaskJSONRequestBody
}

type DeleteFamilyTaskResponseObject interface {
	VisitDeleteFamilyTaskResponse(w http.ResponseWriter) error
}

type DeleteFamilyTask200Response struct {
}

func (response DeleteFamilyTask200Response) VisitDeleteFamilyTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GenerateProblemsRequestObject struct {
	Body *GenerateProblemsJSONRequestBody
}

type GenerateProblemsResponseObject interface {
	VisitGenerateProblemsResponse(w http.ResponseWriter) error
}

type GenerateProblems200JSONResponse []ApiProblemForEdit

func (response GenerateProblems200JSONResponse) VisitGenerateProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoadProblemForAssignmentRequestObject struct {
	Body *LoadProblemForAssignmentJSONRequestBody
}

type LoadProblemForAssignmentResponseObject interface {
	VisitLoadProblemForAssignmentResponse(w http.ResponseWriter) error
}

type LoadProblemForAssignment200JSONResponse ApiLoadProblemForAssignmentCommandResult

func (response LoadProblemForAssignment200JSONResponse) VisitLoadProblemForAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefineProblemsRequestObject struct {
	Body *RefineProblemsJSONRequestBody
}

type RefineProblemsResponseObject interface {
	VisitRefineProblemsResponse(w http.ResponseWriter) error
}

type RefineProblems200JSONResponse []ApiProblemForEdit

func (response RefineProblems200JSONResponse) VisitRefineProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubmitProblemAnswerRequestObject struct {
	Body *SubmitProblemAnswerJSONRequestBody
}

type SubmitProblemAnswerResponseObject interface {
	VisitSubmitProblemAnswerResponse(w http.ResponseWriter) error
}

type SubmitProblemAnswer200JSONResponse ApiSubmitProblemAnswerCommandResp

func (response SubmitProblemAnswer200JSONResponse) VisitSubmitProblemAnswerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFamilyTaskRequestObject struct {
	Body *UpdateFamilyTaskJSONRequestBody
}

type UpdateFamilyTaskResponseObject interface {
	VisitUpdateFamilyTaskResponse(w http.ResponseWriter) error
}

type UpdateFamilyTask200Response struct {
}

func (response UpdateFamilyTask200Response) VisitUpdateFamilyTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateTaskStatusRequestObject struct {
	Body *UpdateTaskStatusJSONRequestBody
}

type UpdateTaskStatusResponseObject interface {
	VisitUpdateTaskStatusResponse(w http.ResponseWriter) error
}

type UpdateTaskStatus200Response struct {
}

func (response UpdateTaskStatus200Response) VisitUpdateTaskStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ListProblemSetProblemsRequestObject struct {
	UserId       string `json:"userId"`
	ProblemSetId string `json:"problemSetId"`
}

type ListProblemSetProblemsResponseObject interface {
	VisitListProblemSetProblemsResponse(w http.ResponseWriter) error
}

type ListProblemSetProblems200JSONResponse []ApiProblemForEdit

func (response ListProblemSetProblems200JSONResponse) VisitListProblemSetProblemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProblemRequestObject struct {
	UserId       string `json:"userId"`
	ProblemSetId string `json:"problemSetId"`
	ProblemId    string `json:"problemId"`
}

type GetProblemResponseObject interface {
	VisitGetProblemResponse(w http.ResponseWriter) error
}

type GetProblem200JSONResponse ApiProblem

func (response GetProblem200JSONResponse) VisitGetProblemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserFamilyProblemSetsRequestObject struct {
	Params ListUserFamilyProblemSetsParams
}

type ListUserFamilyProblemSetsResponseObject interface {
	VisitListUserFamilyProblemSetsResponse(w http.ResponseWriter) error
}

type ListUserFamilyProblemSets200JSONResponse []ApiProblemSet

func (response ListUserFamilyProblemSets200JSONResponse) VisitListUserFamilyProblemSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserProblemsSolutionsRequestObject struct {
	ProblemSetId string `json:"problemSetId"`
	UserId       string `json:"userId"`
}

type ListUserProblemsSolutionsResponseObject interface {
	VisitListUserProblemsSolutionsResponse(w http.ResponseWriter) error
}

type ListUserProblemsSolutions200JSONResponse []ApiUserProblemSolution

func (response ListUserProblemsSolutions200JSONResponse) VisitListUserProblemsSolutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatsRequestObject struct {
	Params GetStatsParams
}

type GetStatsResponseObject interface {
	VisitGetStatsResponse(w http.ResponseWriter) error
}

type GetStats200JSONResponse []ApiTaskStats

func (response GetStats200JSONResponse) VisitGetStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFamilyInfoRequestObject struct {
}

type GetFamilyInfoResponseObject interface {
	VisitGetFamilyInfoResponse(w http.ResponseWriter) error
}

type GetFamilyInfo200JSONResponse UIFamilyInfo

func (response GetFamilyInfo200JSONResponse) VisitGetFamilyInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserInfoRequestObject struct {
}

type GetUserInfoResponseObject interface {
	VisitGetUserInfoResponse(w http.ResponseWriter) error
}

type GetUserInfo200JSONResponse UIUserInfo

func (response GetUserInfo200JSONResponse) VisitGetUserInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/assignments)
	ListAssignments(ctx context.Context, request ListAssignmentsRequestObject) (ListAssignmentsResponseObject, error)

	// (POST /api/commands/create-family-task)
	CreateFamilyTask(ctx context.Context, request CreateFamilyTaskRequestObject) (CreateFamilyTaskResponseObject, error)

	// (POST /api/commands/create-problems-in-set)
	CreateProblemsInSet(ctx context.Context, request CreateProblemsInSetRequestObject) (CreateProblemsInSetResponseObject, error)

	// (POST /api/commands/create-problemset)
	CreateProblemSet(ctx context.Context, request CreateProblemSetRequestObject) (CreateProblemSetResponseObject, error)

	// (POST /api/commands/delete-family-task)
	DeleteFamilyTask(ctx context.Context, request DeleteFamilyTaskRequestObject) (DeleteFamilyTaskResponseObject, error)

	// (POST /api/commands/generate-problems)
	GenerateProblems(ctx context.Context, request GenerateProblemsRequestObject) (GenerateProblemsResponseObject, error)

	// (POST /api/commands/load-problem-for-assignment)
	LoadProblemForAssignment(ctx context.Context, request LoadProblemForAssignmentRequestObject) (LoadProblemForAssignmentResponseObject, error)

	// (POST /api/commands/refine-problems)
	RefineProblems(ctx context.Context, request RefineProblemsRequestObject) (RefineProblemsResponseObject, error)

	// (POST /api/commands/submit-problem-answer)
	SubmitProblemAnswer(ctx context.Context, request SubmitProblemAnswerRequestObject) (SubmitProblemAnswerResponseObject, error)

	// (POST /api/commands/update-family-task)
	UpdateFamilyTask(ctx context.Context, request UpdateFamilyTaskRequestObject) (UpdateFamilyTaskResponseObject, error)

	// (POST /api/commands/update-task-status)
	UpdateTaskStatus(ctx context.Context, request UpdateTaskStatusRequestObject) (UpdateTaskStatusResponseObject, error)

	// (GET /api/family-members/{userId}/problem-sets/{problemSetId}/problems-for-edit)
	ListProblemSetProblems(ctx context.Context, request ListProblemSetProblemsRequestObject) (ListProblemSetProblemsResponseObject, error)

	// (GET /api/family-members/{userId}/problem-sets/{problemSetId}/problems/{problemId})
	GetProblem(ctx context.Context, request GetProblemRequestObject) (GetProblemResponseObject, error)

	// (GET /api/family-problem-sets)
	ListUserFamilyProblemSets(ctx context.Context, request ListUserFamilyProblemSetsRequestObject) (ListUserFamilyProblemSetsResponseObject, error)

	// (GET /api/family-problem-sets/{problemSetId}/{userId}/solutions)
	ListUserProblemsSolutions(ctx context.Context, request ListUserProblemsSolutionsRequestObject) (ListUserProblemsSolutionsResponseObject, error)

	// (GET /api/stats)
	GetStats(ctx context.Context, request GetStatsRequestObject) (GetStatsResponseObject, error)

	// (GET /api/ui/familyInfo)
	GetFamilyInfo(ctx context.Context, request GetFamilyInfoRequestObject) (GetFamilyInfoResponseObject, error)

	// (GET /api/ui/userInfo)
	GetUserInfo(ctx context.Context, request GetUserInfoRequestObject) (GetUserInfoResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAssignments operation middleware
func (sh *strictHandler) ListAssignments(w http.ResponseWriter, r *http.Request) {
	var request ListAssignmentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAssignments(ctx, request.(ListAssignmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAssignments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAssignmentsResponseObject); ok {
		if err := validResponse.VisitListAssignmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFamilyTask operation middleware
func (sh *strictHandler) CreateFamilyTask(w http.ResponseWriter, r *http.Request) {
	var request CreateFamilyTaskRequestObject

	var body CreateFamilyTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFamilyTask(ctx, request.(CreateFamilyTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFamilyTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFamilyTaskResponseObject); ok {
		if err := validResponse.VisitCreateFamilyTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProblemsInSet operation middleware
func (sh *strictHandler) CreateProblemsInSet(w http.ResponseWriter, r *http.Request) {
	var request CreateProblemsInSetRequestObject

	var body CreateProblemsInSetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProblemsInSet(ctx, request.(CreateProblemsInSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProblemsInSet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProblemsInSetResponseObject); ok {
		if err := validResponse.VisitCreateProblemsInSetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProblemSet operation middleware
func (sh *strictHandler) CreateProblemSet(w http.ResponseWriter, r *http.Request) {
	var request CreateProblemSetRequestObject

	var body CreateProblemSetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProblemSet(ctx, request.(CreateProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProblemSet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProblemSetResponseObject); ok {
		if err := validResponse.VisitCreateProblemSetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFamilyTask operation middleware
func (sh *strictHandler) DeleteFamilyTask(w http.ResponseWriter, r *http.Request) {
	var request DeleteFamilyTaskRequestObject

	var body DeleteFamilyTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFamilyTask(ctx, request.(DeleteFamilyTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFamilyTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFamilyTaskResponseObject); ok {
		if err := validResponse.VisitDeleteFamilyTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateProblems operation middleware
func (sh *strictHandler) GenerateProblems(w http.ResponseWriter, r *http.Request) {
	var request GenerateProblemsRequestObject

	var body GenerateProblemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateProblems(ctx, request.(GenerateProblemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateProblems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GenerateProblemsResponseObject); ok {
		if err := validResponse.VisitGenerateProblemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoadProblemForAssignment operation middleware
func (sh *strictHandler) LoadProblemForAssignment(w http.ResponseWriter, r *http.Request) {
	var request LoadProblemForAssignmentRequestObject

	var body LoadProblemForAssignmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoadProblemForAssignment(ctx, request.(LoadProblemForAssignmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoadProblemForAssignment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoadProblemForAssignmentResponseObject); ok {
		if err := validResponse.VisitLoadProblemForAssignmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefineProblems operation middleware
func (sh *strictHandler) RefineProblems(w http.ResponseWriter, r *http.Request) {
	var request RefineProblemsRequestObject

	var body RefineProblemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefineProblems(ctx, request.(RefineProblemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefineProblems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefineProblemsResponseObject); ok {
		if err := validResponse.VisitRefineProblemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubmitProblemAnswer operation middleware
func (sh *strictHandler) SubmitProblemAnswer(w http.ResponseWriter, r *http.Request) {
	var request SubmitProblemAnswerRequestObject

	var body SubmitProblemAnswerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitProblemAnswer(ctx, request.(SubmitProblemAnswerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitProblemAnswer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SubmitProblemAnswerResponseObject); ok {
		if err := validResponse.VisitSubmitProblemAnswerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFamilyTask operation middleware
func (sh *strictHandler) UpdateFamilyTask(w http.ResponseWriter, r *http.Request) {
	var request UpdateFamilyTaskRequestObject

	var body UpdateFamilyTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFamilyTask(ctx, request.(UpdateFamilyTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFamilyTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFamilyTaskResponseObject); ok {
		if err := validResponse.VisitUpdateFamilyTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTaskStatus operation middleware
func (sh *strictHandler) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
	var request UpdateTaskStatusRequestObject

	var body UpdateTaskStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTaskStatus(ctx, request.(UpdateTaskStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAssignmentStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTaskStatusResponseObject); ok {
		if err := validResponse.VisitUpdateTaskStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProblemSetProblems operation middleware
func (sh *strictHandler) ListProblemSetProblems(w http.ResponseWriter, r *http.Request, userId string, problemSetId string) {
	var request ListProblemSetProblemsRequestObject

	request.UserId = userId
	request.ProblemSetId = problemSetId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProblemSetProblems(ctx, request.(ListProblemSetProblemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProblemSetProblems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProblemSetProblemsResponseObject); ok {
		if err := validResponse.VisitListProblemSetProblemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProblem operation middleware
func (sh *strictHandler) GetProblem(w http.ResponseWriter, r *http.Request, userId string, problemSetId string, problemId string) {
	var request GetProblemRequestObject

	request.UserId = userId
	request.ProblemSetId = problemSetId
	request.ProblemId = problemId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProblem(ctx, request.(GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProblem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProblemResponseObject); ok {
		if err := validResponse.VisitGetProblemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserFamilyProblemSets operation middleware
func (sh *strictHandler) ListUserFamilyProblemSets(w http.ResponseWriter, r *http.Request, params ListUserFamilyProblemSetsParams) {
	var request ListUserFamilyProblemSetsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserFamilyProblemSets(ctx, request.(ListUserFamilyProblemSetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserFamilyProblemSets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserFamilyProblemSetsResponseObject); ok {
		if err := validResponse.VisitListUserFamilyProblemSetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserProblemsSolutions operation middleware
func (sh *strictHandler) ListUserProblemsSolutions(w http.ResponseWriter, r *http.Request, problemSetId string, userId string) {
	var request ListUserProblemsSolutionsRequestObject

	request.ProblemSetId = problemSetId
	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserProblemsSolutions(ctx, request.(ListUserProblemsSolutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserProblemsSolutions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserProblemsSolutionsResponseObject); ok {
		if err := validResponse.VisitListUserProblemsSolutionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStats operation middleware
func (sh *strictHandler) GetStats(w http.ResponseWriter, r *http.Request, params GetStatsParams) {
	var request GetStatsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStats(ctx, request.(GetStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStats")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStatsResponseObject); ok {
		if err := validResponse.VisitGetStatsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFamilyInfo operation middleware
func (sh *strictHandler) GetFamilyInfo(w http.ResponseWriter, r *http.Request) {
	var request GetFamilyInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFamilyInfo(ctx, request.(GetFamilyInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFamilyInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFamilyInfoResponseObject); ok {
		if err := validResponse.VisitGetFamilyInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserInfo operation middleware
func (sh *strictHandler) GetUserInfo(w http.ResponseWriter, r *http.Request) {
	var request GetUserInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserInfo(ctx, request.(GetUserInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserInfoResponseObject); ok {
		if err := validResponse.VisitGetUserInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaS3PbOBL+KyzsHqkou3vTTWsnKVUyMyk/TqkcYLGlICYBBgA9cbn036fwIMEHAJKW",
	"5ElSc7MJsh9fv9DdekJbVpSMApUCrZ6Q2H6BAus/1yVZC0H2tAAq1YOSsxK4JKCPMxBbTkpJGFX/yscS",
	"0AoJyQndo0OKdoxfYgnqbMd4gSVaoQxLWEhSAEqHH5DMS0dILCvN8d8cdmiF/rV0Ii+tvMuOsNfmk0OK",
	"JJE5eMmaBzOI3qgPDocUcfhWEQ4ZWn1SMltSNS+neCP650ZZdvcVtlKx98m7ekJAq0LRZSVQlKKMUUXn",
	"Lmfbe1CsCOeQwwOmskXVKTUUuEVTYnGPUmXFuxyKawiSuOCAJbzFBckfb7C4v2BFgWm25nsxdANNdRxH",
	"R22AoaYQwMiI8rEROSrKBI+8FcA3fj8LuUpfWmdlS2yK6GJDx6SPS+esFn9BkyLS/jFiFCvcW8bfZES6",
	"qECYc/w4UL0jQ4vjBDAuIYdZLuXV0uM4YZaG2RXLO0GAs4KoyCqguAMeioCWt872MkN5k3UtEcg/NdKz",
	"3c9xCaj/DijwlgNGEcdZRpRCOL+CbxUIeQPf5fP8sAr5cNyZqqj7fGA4c87qUlxcqea1gKgzK1RPgQ55",
	"R+x5GlyBqHJPkbUoTY/lEM4huT46Bj30qPgT+HPSyVp/6fPxsdAhR2VmU4ttfNTix9W2os6O8ZMJOkW8",
	"Oj2fSkoiLhjnipk7vWMsB0yfkYgctbguQS2OdbRg9Tq3v81zNXXf+uH87Ap2hE4rEX/LBUTpoyQMlqPj",
	"qk2HfEuDAFrX1V1BZMf54gVIvxKAa7Q6WWmmaNcrRe7L1MkwW6crEOVQp60J9nVMNfhe5pjisFfHElDf",
	"h5t30wHvgErq2qY6Kl+HwCioY3HBKtpmT6iEvSlas/tWySTOx6hOdVTXPDY+2hN6yDCAw22Z/ShtnBGl",
	"NkwVzzRbVtQTh+OHCsdND+Y1ItNbf9Us1XWB5VUdKd5Q81fpKXEYyyDN6U1wQiJY/gDZPLgro9gDySCL",
	"yObPzu3kdWOLa0uIAPUhFs0TL/y3G+PEG7pjgxqMzFlC1GE66JIKQt8UmOQdQEA/8YCx07QuiShz/Pg7",
	"Lvwwm7duOYl0k9OLaq3db6a/9TWaKnHMpmdCfmRA4FRJ22D5kHCa1RLFbGW1CVnLNvN9e8EMUxEuZNBE",
	"OY4ccjthmJQ59TiiD1stlROixdIyiKHzvDlF4G553vFFp0eLzzBuN3qk5I1SdZJsfDH649jcyB81eMSy",
	"zbet2ZWJorWdYO3akZGifQXCN9FVvIkF0RoJXX8pMX1PMpGsP25Qih6ACwPs61f/UfxZCRSXBK3Q/16p",
	"RykqsfyiAV7ikizdhVM/25vepmujnAiZrFsvarJcXwtVUUAfiJDdcw6iZFQYS/739WtTBam0twFcljnZ",
	"agLLr8K4tUF7Ts/R2mkM81m/aUR/vNfWk1jdVD4hoZC7J8pl1WMNxtZcZsRyqye+C2OYRX2jKpnwoGOm",
	"w4lNYDdmNN/Fpz+GR8aJQMj/s+xxFjYjkMQG/oeD8d6hZY4Gqu63FoQuhG2PY2DVfWpCaKLaaT9gnYn7",
	"uTELjvdfALbpiI2j9XJQvQBOmV42TItDs5iIxmF/d3E+oGJbknMAtbc7gkV7duPHqV4nJPWryY7x+p9E",
	"ePyrv4A4H2yxVUcYtpMXltFt2lHFJWc4q+202DG+wN3dvNdqHxjORELhu2xMpczW+nRQlAN7ivNZb8pu",
	"5wRWPE4Ku5850oZm2jgh2sxcdnqsdee457NVeF78y8SZ0APRJtKw2xB5LWXmp41x7Ot9+3imrOcz0siY",
	"+vyxNDJTPtJAlZ4lTqvuZu4Yre79Ken57BKbx56julugFEILNwaNAqXESuz80w+Um+GeGyj/tPiEQFkP",
	"snOo5ZMZuB+WdegLkGL51N4cNWdCV2Cw+8xw+9u6f7vuRSVz9alqz309sbsotxJ6iTkuQOpR4Kc+rzab",
	"zSVSDT9a6ZYdpYjqIUZ/A+bGEZJXkLaMMxjg+IcvATatzdpUBp9/5rpxjBM1zzfZIehHe/C6kee6Ld3R",
	"L+wtaUidEVVe2Ckn/1rnCKdr+9jkPCTs7T+5e0wMHW8SUmYzpcqlo9E81LP1twr448+UGq7hxGkhlgWa",
	"VCHsBnDEhs1r/W5AWVLRCtqxLiPXDaN/6skJnMa3xD2N94j61wteb9CXNPUKEZJsha8SmJ8/jFj5LWdF",
	"kpnNqi9ed5ypWuKAmfYjyYG4LMZEsvksXsrA7ockpzFrVeeFeqnlNe87kIkAIQijNkHX2+iBmVuL7DOW",
	"q87CfFzz201X5aq1xQsqnLP9HrKEUJ3Jggo3G8Gzqttwmaqse/BU+3V3xXb4fPgrAAD//3ei6R9pMwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
